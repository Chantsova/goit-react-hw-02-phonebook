{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["Form","state","name","number","id","nameInputId","uuidv4","numberInputId","handleChange","event","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","Contacts","contacts","onDeleteContact","map","onClick","Filter","App","filter","deleteContacts","contactId","prevState","contact","formSubmitHandler","data","undefined","find","toLowerCase","includes","concat","alert","changeFilter","getVisibleContacts","normalizedFilter","visibleContacts","onInput","testDublicateName","ContactList","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.ea4c9588.chunk.js","sourcesContent":["import './ContactForm.css';\nimport React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n    id: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n      id: uuidv4(),\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          <h2>Name</h2>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          <h2>Number</h2>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Contacts = ({ contacts, onDeleteContact }) => (\n  <ul>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id}>\n        <p>{name}</p>\n        <p>{number}</p>\n        <button onClick={() => onDeleteContact(id)}>Delete</button>\n      </li>\n    ))}\n    </ul>\n);\n\nexport default Contacts;\n","import './Filter.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        <input type=\"text\"\r\n            value={value}\r\n            onChange={onChange}>\r\n        </input>\r\n    </label>\r\n);\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter.jsx';\n\nclass App extends Component {\n  state = {\n    contacts: [\n    {id: 'id-1', name: 'Anastasia', number: '161-69-55'},\n    {id: 'id-2', name: 'Svetlana Divnaya', number: '443-89-12'},\n    {id: 'id-3', name: 'Illya Chantsov', number: '645-17-79'},\n    {id: 'id-4', name: 'Tatiana Zhelezina', number: '227-91-26'},\n  ],\n    filter: '',\n  };\n\n  deleteContacts = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  formSubmitHandler = data => {\n    const { contacts } = this.state;\n    \n    const found = contacts.find(contact => contact.name.toLowerCase().includes(data.name.toLowerCase()));\n    found === undefined ? this.setState({ contacts: this.state.contacts.concat(data) }) : alert(`${data.name} is already in the Contact List`);\n  };\n\n changeFilter = (event) => {\n    this.setState({ filter: event.target.value });\n };\n  \n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <>\n      <div>\n        <h1>Phonebook</h1>\n          <ContactForm onSubmit={this.formSubmitHandler} onInput={this.testDublicateName}/>\n          \n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={this.changeFilter }/>\n          <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContacts} />\n</div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}